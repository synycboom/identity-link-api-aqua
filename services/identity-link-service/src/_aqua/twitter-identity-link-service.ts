/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.1-240
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
  CallParams,
  callFunction,
  registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';

// Services

export interface TwitterIdentityLinkServiceDef {
  twitterRequest: (
    req: { did: string; username: string },
    requestId: string,
    reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string },
    callParams: CallParams<'req' | 'requestId' | 'reqPeer'>
  ) => void | Promise<void>;
  twitterVerify: (
    req: { jws: string },
    requestId: string,
    reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string },
    callParams: CallParams<'req' | 'requestId' | 'reqPeer'>
  ) => void | Promise<void>;
}
export function registerTwitterIdentityLinkService(
  service: TwitterIdentityLinkServiceDef
): void;
export function registerTwitterIdentityLinkService(
  serviceId: string,
  service: TwitterIdentityLinkServiceDef
): void;
export function registerTwitterIdentityLinkService(
  peer: FluencePeer,
  service: TwitterIdentityLinkServiceDef
): void;
export function registerTwitterIdentityLinkService(
  peer: FluencePeer,
  serviceId: string,
  service: TwitterIdentityLinkServiceDef
): void;

export function registerTwitterIdentityLinkService(...args: any) {
  registerService(args, {
    defaultServiceId: 'twitter-identity-link-service',
    functions: [
      {
        functionName: 'twitterRequest',
        argDefs: [
          {
            name: 'req',
            argType: {
              tag: 'primitive',
            },
          },
          {
            name: 'requestId',
            argType: {
              tag: 'primitive',
            },
          },
          {
            name: 'reqPeer',
            argType: {
              tag: 'primitive',
            },
          },
        ],
        returnType: {
          tag: 'void',
        },
      },
      {
        functionName: 'twitterVerify',
        argDefs: [
          {
            name: 'req',
            argType: {
              tag: 'primitive',
            },
          },
          {
            name: 'requestId',
            argType: {
              tag: 'primitive',
            },
          },
          {
            name: 'reqPeer',
            argType: {
              tag: 'primitive',
            },
          },
        ],
        returnType: {
          tag: 'void',
        },
      },
    ],
  });
}

// Functions
