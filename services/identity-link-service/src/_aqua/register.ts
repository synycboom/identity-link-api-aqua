/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-233
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
  ResultCodes,
  RequestFlow,
  RequestFlowBuilder,
  CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';

function missingFields(obj: any, fields: string[]): string[] {
  return fields.filter(f => !(f in obj));
}

// Services

// Functions
export type UpdateServiceArgReq = { payload: string; signature: string };
export type UpdateServiceResult = { code: number; error: string };
export function updateService(
  req: UpdateServiceArgReq,
  serviceId: string,
  servicePeerId: string,
  config?: { ttl?: number }
): Promise<UpdateServiceResult>;
export function updateService(
  peer: FluencePeer,
  req: UpdateServiceArgReq,
  serviceId: string,
  servicePeerId: string,
  config?: { ttl?: number }
): Promise<UpdateServiceResult>;
export function updateService(...args: any) {
  let peer: FluencePeer;
  let req: any;
  let serviceId: any;
  let servicePeerId: any;
  let config: any;
  if (FluencePeer.isInstance(args[0])) {
    peer = args[0];
    req = args[1];
    serviceId = args[2];
    servicePeerId = args[3];
    config = args[4];
  } else {
    peer = Fluence.getPeer();
    req = args[0];
    serviceId = args[1];
    servicePeerId = args[2];
    config = args[3];
  }

  let request: RequestFlow;
  const promise = new Promise<UpdateServiceResult>((resolve, reject) => {
    const r = new RequestFlowBuilder()
      .disableInjections()
      .withRawScript(
        `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "req") [] req)
                           )
                           (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                          )
                          (call %init_peer_id% ("getDataSrv" "servicePeerId") [] servicePeerId)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call servicePeerId (serviceId "update_service") [req] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
                `
      )
      .configHandler(h => {
        h.on('getDataSrv', '-relay-', () => {
          return peer.getStatus().relayPeerId;
        });
        h.on('getDataSrv', 'req', () => {
          return req;
        });
        h.on('getDataSrv', 'serviceId', () => {
          return serviceId;
        });
        h.on('getDataSrv', 'servicePeerId', () => {
          return servicePeerId;
        });
        h.onEvent('callbackSrv', 'response', args => {
          const [res] = args;
          resolve(res);
        });
        h.onEvent('errorHandlingSrv', 'error', args => {
          const [err] = args;
          reject(err);
        });
      })
      .handleScriptError(reject)
      .handleTimeout(() => {
        reject('Request timed out for updateService');
      });

    if (config && config.ttl) {
      r.withTTL(config.ttl);
    }

    request = r.build();
  });
  peer.internals.initiateFlow(request!);
  return promise;
}
