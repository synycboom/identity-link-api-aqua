/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.1-240
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
  CallParams,
  callFunction,
  registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';

// Services

// Functions
export type UpdateServiceArgReq = { payload: string; signature: string };
export type UpdateServiceResult = { code: number; error: string };
export function updateService(
  req: UpdateServiceArgReq,
  serviceId: string,
  servicePeerId: string,
  config?: { ttl?: number }
): Promise<UpdateServiceResult>;
export function updateService(
  peer: FluencePeer,
  req: UpdateServiceArgReq,
  serviceId: string,
  servicePeerId: string,
  config?: { ttl?: number }
): Promise<UpdateServiceResult>;
export function updateService(...args: any) {
  let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "req") [] req)
                           )
                           (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
                          )
                          (call %init_peer_id% ("getDataSrv" "servicePeerId") [] servicePeerId)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call servicePeerId (serviceId "update_service") [req] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
  return callFunction(
    args,
    {
      functionName: 'updateService',
      returnType: {
        tag: 'primitive',
      },
      argDefs: [
        {
          name: 'req',
          argType: {
            tag: 'primitive',
          },
        },
        {
          name: 'serviceId',
          argType: {
            tag: 'primitive',
          },
        },
        {
          name: 'servicePeerId',
          argType: {
            tag: 'primitive',
          },
        },
      ],
      names: {
        relay: '-relay-',
        getDataSrv: 'getDataSrv',
        callbackSrv: 'callbackSrv',
        responseSrv: 'callbackSrv',
        responseFnName: 'response',
        errorHandlingSrv: 'errorHandlingSrv',
        errorFnName: 'error',
      },
    },
    script
  );
}
