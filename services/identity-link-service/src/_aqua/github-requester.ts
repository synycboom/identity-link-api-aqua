/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-233
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter(f => !(f in obj))
}

// Services

export interface GithubRequesterDef {
    onRequestResult: (res: { code: number; data: { challengeCode: string; }; error: string; }, callParams: CallParams<'res'>) => void;
}
export function registerGithubRequester(service: GithubRequesterDef): void;
export function registerGithubRequester(serviceId: string, service: GithubRequesterDef): void;
export function registerGithubRequester(peer: FluencePeer, service: GithubRequesterDef): void;
export function registerGithubRequester(peer: FluencePeer, serviceId: string, service: GithubRequesterDef): void;


export function registerGithubRequester(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } else {
        serviceId = "github-requester"
    }

    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    const incorrectServiceDefinitions = missingFields(service, ['onRequestResult']);
    if (!!incorrectServiceDefinitions.length) {
        throw new Error("Error registering service GithubRequester: missing functions: " + incorrectServiceDefinitions.map((d) => "'" + d + "'").join(", "))
    }

    peer.internals.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'onRequestResult') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    res: req.tetraplets[0]
                },
            };
            resp.retCode = ResultCodes.success;
            service.onRequestResult(req.args[0], callParams); resp.result = {}
        }

        next();
    });
}

// Functions
export type SendGithubRequestResultArgRes = { code: number; data: { challengeCode: string; }; error: string; }

export function sendGithubRequestResult(res: SendGithubRequestResultArgRes, peerId: string, relayPeerId: string, hasRelayPeer: boolean, config?: {ttl?: number}): Promise<void>;
export function sendGithubRequestResult(peer: FluencePeer, res: SendGithubRequestResultArgRes, peerId: string, relayPeerId: string, hasRelayPeer: boolean, config?: {ttl?: number}): Promise<void>;
export function sendGithubRequestResult(...args: any) {
    let peer: FluencePeer;
    let res: any;
    let peerId: any;
    let relayPeerId: any;
    let hasRelayPeer: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        res = args[1];
        peerId = args[2];
        relayPeerId = args[3];
        hasRelayPeer = args[4];
        config = args[5];
    } else {
        peer = Fluence.getPeer();
        res = args[0];
        peerId = args[1];
        relayPeerId = args[2];
        hasRelayPeer = args[3];
        config = args[4];
    }

    let request: RequestFlow;
    const promise = new Promise<void>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "res") [] res)
                         )
                         (call %init_peer_id% ("getDataSrv" "peerId") [] peerId)
                        )
                        (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
                       )
                       (call %init_peer_id% ("getDataSrv" "hasRelayPeer") [] hasRelayPeer)
                      )
                      (xor
                       (match hasRelayPeer true
                        (xor
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call relayPeerId ("op" "noop") [])
                          )
                          (xor
                           (call peerId ("github-requester" "onRequestResult") [res])
                           (seq
                            (seq
                             (seq
                              (call relayPeerId ("op" "noop") [])
                              (call -relay- ("op" "noop") [])
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                            (call -relay- ("op" "noop") [])
                           )
                          )
                         )
                         (seq
                          (seq
                           (seq
                            (call relayPeerId ("op" "noop") [])
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                       )
                       (seq
                        (xor
                         (call peerId ("github-requester" "onRequestResult") [res])
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                      )
                     )
                     (seq
                      (seq
                       (call relayPeerId ("op" "noop") [])
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                     )
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'res', () => {return res;});
                    h.on('getDataSrv', 'peerId', () => {return peerId;});
                    h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
                    h.on('getDataSrv', 'hasRelayPeer', () => {return hasRelayPeer;});
                    h.onEvent('callbackSrv', 'response', () => {

                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for sendGithubRequestResult');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return Promise.race([promise, Promise.resolve()]);
}
