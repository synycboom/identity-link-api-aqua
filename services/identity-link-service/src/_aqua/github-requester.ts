/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.1-240
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
  CallParams,
  callFunction,
  registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';

// Services

export interface GithubRequesterDef {
  onRequestResult: (
    res: {
      code: number;
      data: { challengeCode: string };
      error: string;
      requestId: string;
    },
    callParams: CallParams<'res'>
  ) => void | Promise<void>;
  onVerifyResult: (
    res: {
      code: number;
      data: { attestation: string };
      error: string;
      requestId: string;
    },
    callParams: CallParams<'res'>
  ) => void | Promise<void>;
}
export function registerGithubRequester(service: GithubRequesterDef): void;
export function registerGithubRequester(
  serviceId: string,
  service: GithubRequesterDef
): void;
export function registerGithubRequester(
  peer: FluencePeer,
  service: GithubRequesterDef
): void;
export function registerGithubRequester(
  peer: FluencePeer,
  serviceId: string,
  service: GithubRequesterDef
): void;

export function registerGithubRequester(...args: any) {
  registerService(args, {
    defaultServiceId: 'github-requester',
    functions: [
      {
        functionName: 'onRequestResult',
        argDefs: [
          {
            name: 'res',
            argType: {
              tag: 'primitive',
            },
          },
        ],
        returnType: {
          tag: 'void',
        },
      },
      {
        functionName: 'onVerifyResult',
        argDefs: [
          {
            name: 'res',
            argType: {
              tag: 'primitive',
            },
          },
        ],
        returnType: {
          tag: 'void',
        },
      },
    ],
  });
}

// Functions
export type OnRequestResultArgRes = {
  code: number;
  data: { challengeCode: string };
  error: string;
  requestId: string;
};
export type OnRequestResultArgReqPeer = {
  hasRelayPeer: boolean;
  peerId: string;
  relayPeerId: string;
};

export function onRequestResult(
  res: OnRequestResultArgRes,
  reqPeer: OnRequestResultArgReqPeer,
  config?: { ttl?: number }
): Promise<void>;
export function onRequestResult(
  peer: FluencePeer,
  res: OnRequestResultArgRes,
  reqPeer: OnRequestResultArgReqPeer,
  config?: { ttl?: number }
): Promise<void>;
export function onRequestResult(...args: any) {
  let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "res") [] res)
                       )
                       (call %init_peer_id% ("getDataSrv" "reqPeer") [] reqPeer)
                      )
                      (xor
                       (match reqPeer.$.hasRelayPeer! true
                        (xor
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call reqPeer.$.relayPeerId! ("op" "noop") [])
                          )
                          (xor
                           (call reqPeer.$.peerId! ("github-requester" "onRequestResult") [res])
                           (seq
                            (seq
                             (seq
                              (call reqPeer.$.relayPeerId! ("op" "noop") [])
                              (call -relay- ("op" "noop") [])
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                            (call -relay- ("op" "noop") [])
                           )
                          )
                         )
                         (seq
                          (seq
                           (seq
                            (call reqPeer.$.relayPeerId! ("op" "noop") [])
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                       )
                       (seq
                        (xor
                         (call reqPeer.$.peerId! ("github-requester" "onRequestResult") [res])
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                      )
                     )
                     (seq
                      (seq
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                     )
                    )
    `;
  return callFunction(
    args,
    {
      functionName: 'onRequestResult',
      returnType: {
        tag: 'void',
      },
      argDefs: [
        {
          name: 'res',
          argType: {
            tag: 'primitive',
          },
        },
        {
          name: 'reqPeer',
          argType: {
            tag: 'primitive',
          },
        },
      ],
      names: {
        relay: '-relay-',
        getDataSrv: 'getDataSrv',
        callbackSrv: 'callbackSrv',
        responseSrv: 'callbackSrv',
        responseFnName: 'response',
        errorHandlingSrv: 'errorHandlingSrv',
        errorFnName: 'error',
      },
    },
    script
  );
}

export type OnVerifyResultArgRes = {
  code: number;
  data: { attestation: string };
  error: string;
  requestId: string;
};
export type OnVerifyResultArgReqPeer = {
  hasRelayPeer: boolean;
  peerId: string;
  relayPeerId: string;
};

export function onVerifyResult(
  res: OnVerifyResultArgRes,
  reqPeer: OnVerifyResultArgReqPeer,
  config?: { ttl?: number }
): Promise<void>;
export function onVerifyResult(
  peer: FluencePeer,
  res: OnVerifyResultArgRes,
  reqPeer: OnVerifyResultArgReqPeer,
  config?: { ttl?: number }
): Promise<void>;
export function onVerifyResult(...args: any) {
  let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "res") [] res)
                       )
                       (call %init_peer_id% ("getDataSrv" "reqPeer") [] reqPeer)
                      )
                      (xor
                       (match reqPeer.$.hasRelayPeer! true
                        (xor
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call reqPeer.$.relayPeerId! ("op" "noop") [])
                          )
                          (xor
                           (call reqPeer.$.peerId! ("github-requester" "onVerifyResult") [res])
                           (seq
                            (seq
                             (seq
                              (call reqPeer.$.relayPeerId! ("op" "noop") [])
                              (call -relay- ("op" "noop") [])
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                            (call -relay- ("op" "noop") [])
                           )
                          )
                         )
                         (seq
                          (seq
                           (seq
                            (call reqPeer.$.relayPeerId! ("op" "noop") [])
                            (call -relay- ("op" "noop") [])
                           )
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                       )
                       (seq
                        (xor
                         (call reqPeer.$.peerId! ("github-requester" "onVerifyResult") [res])
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                          )
                          (call -relay- ("op" "noop") [])
                         )
                        )
                        (call -relay- ("op" "noop") [])
                       )
                      )
                     )
                     (seq
                      (seq
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                     )
                    )
    `;
  return callFunction(
    args,
    {
      functionName: 'onVerifyResult',
      returnType: {
        tag: 'void',
      },
      argDefs: [
        {
          name: 'res',
          argType: {
            tag: 'primitive',
          },
        },
        {
          name: 'reqPeer',
          argType: {
            tag: 'primitive',
          },
        },
      ],
      names: {
        relay: '-relay-',
        getDataSrv: 'getDataSrv',
        callbackSrv: 'callbackSrv',
        responseSrv: 'callbackSrv',
        responseFnName: 'response',
        errorHandlingSrv: 'errorHandlingSrv',
        errorFnName: 'error',
      },
    },
    script
  );
}
