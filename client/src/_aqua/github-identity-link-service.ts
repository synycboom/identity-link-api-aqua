/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.1-240
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface GithubIdentityLinkServiceDef {
    githubRequest: (req: { did: string; username: string; }, requestId: string, reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }, callParams: CallParams<'req' | 'requestId' | 'reqPeer'>) => void | Promise<void>;
    githubVerify: (req: { jws: string; }, requestId: string, reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }, callParams: CallParams<'req' | 'requestId' | 'reqPeer'>) => void | Promise<void>;
}
export function registerGithubIdentityLinkService(service: GithubIdentityLinkServiceDef): void;
export function registerGithubIdentityLinkService(serviceId: string, service: GithubIdentityLinkServiceDef): void;
export function registerGithubIdentityLinkService(peer: FluencePeer, service: GithubIdentityLinkServiceDef): void;
export function registerGithubIdentityLinkService(peer: FluencePeer, serviceId: string, service: GithubIdentityLinkServiceDef): void;
       

export function registerGithubIdentityLinkService(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "github-identity-link-service",
    "functions" : [
        {
            "functionName" : "githubRequest",
            "argDefs" : [
                {
                    "name" : "req",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "requestId",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "reqPeer",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        },
        {
            "functionName" : "githubVerify",
            "argDefs" : [
                {
                    "name" : "req",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "requestId",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "reqPeer",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "void"
            }
        }
    ]
}
    );
}
      
// Functions
export type GithubRequestArgReq = { did: string; username: string; }
export type GithubRequestArgReqPeer = { hasRelayPeer: boolean; peerId: string; relayPeerId: string; } 

export function githubRequest(req: GithubRequestArgReq, requestId: string, reqPeer: GithubRequestArgReqPeer, config?: {ttl?: number}): Promise<void>;
export function githubRequest(peer: FluencePeer, req: GithubRequestArgReq, requestId: string, reqPeer: GithubRequestArgReqPeer, config?: {ttl?: number}): Promise<void>;
export function githubRequest(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "req") [] req)
                          )
                          (call %init_peer_id% ("getDataSrv" "requestId") [] requestId)
                         )
                         (call %init_peer_id% ("getDataSrv" "reqPeer") [] reqPeer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                      )
                      (xor
                       (call reqPeer.$.peerId! ("github-identity-link-service" "githubRequest") [req requestId reqPeer])
                       (seq
                        (seq
                         (seq
                          (call reqPeer.$.relayPeerId! ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                        (call -relay- ("op" "noop") [])
                       )
                      )
                     )
                     (seq
                      (seq
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                     )
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "githubRequest",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "req",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "requestId",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "reqPeer",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type GithubVerifyArgReq = { jws: string; }
export type GithubVerifyArgReqPeer = { hasRelayPeer: boolean; peerId: string; relayPeerId: string; } 

export function githubVerify(req: GithubVerifyArgReq, requestId: string, reqPeer: GithubVerifyArgReqPeer, config?: {ttl?: number}): Promise<void>;
export function githubVerify(peer: FluencePeer, req: GithubVerifyArgReq, requestId: string, reqPeer: GithubVerifyArgReqPeer, config?: {ttl?: number}): Promise<void>;
export function githubVerify(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "req") [] req)
                          )
                          (call %init_peer_id% ("getDataSrv" "requestId") [] requestId)
                         )
                         (call %init_peer_id% ("getDataSrv" "reqPeer") [] reqPeer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                      )
                      (xor
                       (call reqPeer.$.peerId! ("github-identity-link-service" "githubVerify") [req requestId reqPeer])
                       (seq
                        (seq
                         (seq
                          (call reqPeer.$.relayPeerId! ("op" "noop") [])
                          (call -relay- ("op" "noop") [])
                         )
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                        (call -relay- ("op" "noop") [])
                       )
                      )
                     )
                     (seq
                      (seq
                       (call reqPeer.$.relayPeerId! ("op" "noop") [])
                       (call -relay- ("op" "noop") [])
                      )
                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                     )
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "githubVerify",
    "returnType" : {
        "tag" : "void"
    },
    "argDefs" : [
        {
            "name" : "req",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "requestId",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "reqPeer",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
