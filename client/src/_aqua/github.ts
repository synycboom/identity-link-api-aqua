/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.2-233
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter(f => !(f in obj))
}

// Services

// Functions
export type RequestArgRouter = { identityLinkSerivceId: string; routerPeerId: string; routerServiceId: string; }
export type RequestArgPayload = { req: { did: string; username: string; }; reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }; requestId: string; } 

export function request(router: RequestArgRouter, payload: RequestArgPayload, config?: {ttl?: number}): Promise<string>;
export function request(peer: FluencePeer, router: RequestArgRouter, payload: RequestArgPayload, config?: {ttl?: number}): Promise<string>;
export function request(...args: any) {
    let peer: FluencePeer;
    let router: any;
    let payload: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        router = args[1];
        payload = args[2];
        config = args[3];
    } else {
        peer = Fluence.getPeer();
        router = args[0];
        payload = args[1];
        config = args[2];
    }

    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "router") [] router)
                             )
                             (call %init_peer_id% ("getDataSrv" "payload") [] payload)
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (xor
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call router.$.routerPeerId! (router.$.routerServiceId! "get_service") [router.$.identityLinkSerivceId!] s)
                            )
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                             (call -relay- ("op" "noop") [])
                            )
                           )
                          )
                          (call s.$.routing.relay_peer_id! ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call s.$.routing.relay_peer_id! ("op" "noop") [])
                           (call s.$.routing.peer_id! (s.$.routing.service_id! "githubRequest") [payload.$.req! payload.$.requestId! payload.$.reqPeer!])
                          )
                          (seq
                           (seq
                            (seq
                             (call s.$.routing.relay_peer_id! ("op" "noop") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (call s.$.routing.relay_peer_id! ("op" "noop") [])
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [""])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'router', () => {return router;});
                    h.on('getDataSrv', 'payload', () => {return payload;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for request');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}

export type VerifyArgRouter = { identityLinkSerivceId: string; routerPeerId: string; routerServiceId: string; }
export type VerifyArgPayload = { req: { jws: string; }; reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }; requestId: string; } 

export function verify(router: VerifyArgRouter, payload: VerifyArgPayload, config?: {ttl?: number}): Promise<string>;
export function verify(peer: FluencePeer, router: VerifyArgRouter, payload: VerifyArgPayload, config?: {ttl?: number}): Promise<string>;
export function verify(...args: any) {
    let peer: FluencePeer;
    let router: any;
    let payload: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        router = args[1];
        payload = args[2];
        config = args[3];
    } else {
        peer = Fluence.getPeer();
        router = args[0];
        payload = args[1];
        config = args[2];
    }

    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "router") [] router)
                             )
                             (call %init_peer_id% ("getDataSrv" "payload") [] payload)
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (xor
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call router.$.routerPeerId! (router.$.routerServiceId! "get_service") [router.$.identityLinkSerivceId!] s)
                            )
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                             )
                             (call -relay- ("op" "noop") [])
                            )
                           )
                          )
                          (call s.$.routing.relay_peer_id! ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call s.$.routing.relay_peer_id! ("op" "noop") [])
                           (call s.$.routing.peer_id! (s.$.routing.service_id! "githubVerify") [payload.$.req! payload.$.requestId! payload.$.reqPeer!])
                          )
                          (seq
                           (seq
                            (seq
                             (call s.$.routing.relay_peer_id! ("op" "noop") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (call s.$.routing.relay_peer_id! ("op" "noop") [])
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [""])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'router', () => {return router;});
                    h.on('getDataSrv', 'payload', () => {return payload;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for verify');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
