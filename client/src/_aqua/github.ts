/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.1-240
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

// Functions
export type RequestArgRouter = { identityLinkServiceId: string; routerPeerId: string; routerServiceId: string; }
export type RequestArgPayload = { req: { did: string; username: string; }; reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }; requestId: string; } 

export function request(router: RequestArgRouter, payload: RequestArgPayload, config?: {ttl?: number}): Promise<string>;
export function request(peer: FluencePeer, router: RequestArgRouter, payload: RequestArgPayload, config?: {ttl?: number}): Promise<string>;
export function request(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                (call %init_peer_id% ("getDataSrv" "router") [] router)
                               )
                               (call %init_peer_id% ("getDataSrv" "payload") [] payload)
                              )
                              (call -relay- ("op" "noop") [])
                             )
                             (xor
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call router.$.routerPeerId! (router.$.routerServiceId! "get_service") [router.$.identityLinkServiceId!] s)
                              )
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (xor
                            (mismatch s.$.code! 200
                             (xor
                              (seq
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (null)
                             )
                            )
                            (null)
                           )
                          )
                          (call s.$.routing.relay_peer_id! ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call s.$.routing.relay_peer_id! ("op" "noop") [])
                           (call s.$.routing.peer_id! (s.$.routing.service_id! "githubRequest") [payload.$.req! payload.$.requestId! payload.$.reqPeer!])
                          )
                          (seq
                           (seq
                            (seq
                             (call s.$.routing.relay_peer_id! ("op" "noop") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (call s.$.routing.relay_peer_id! ("op" "noop") [])
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [s.$.error!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "request",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "router",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "payload",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type VerifyArgRouter = { identityLinkServiceId: string; routerPeerId: string; routerServiceId: string; }
export type VerifyArgPayload = { req: { jws: string; }; reqPeer: { hasRelayPeer: boolean; peerId: string; relayPeerId: string; }; requestId: string; } 

export function verify(router: VerifyArgRouter, payload: VerifyArgPayload, config?: {ttl?: number}): Promise<string>;
export function verify(peer: FluencePeer, router: VerifyArgRouter, payload: VerifyArgPayload, config?: {ttl?: number}): Promise<string>;
export function verify(...args: any) {

    let script = `
                        (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                                (call %init_peer_id% ("getDataSrv" "router") [] router)
                               )
                               (call %init_peer_id% ("getDataSrv" "payload") [] payload)
                              )
                              (call -relay- ("op" "noop") [])
                             )
                             (xor
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call router.$.routerPeerId! (router.$.routerServiceId! "get_service") [router.$.identityLinkServiceId!] s)
                              )
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                            )
                            (call -relay- ("op" "noop") [])
                           )
                           (xor
                            (mismatch s.$.code! 200
                             (xor
                              (seq
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (null)
                             )
                            )
                            (null)
                           )
                          )
                          (call s.$.routing.relay_peer_id! ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (call s.$.routing.relay_peer_id! ("op" "noop") [])
                           (call s.$.routing.peer_id! (s.$.routing.service_id! "githubVerify") [payload.$.req! payload.$.requestId! payload.$.reqPeer!])
                          )
                          (seq
                           (seq
                            (seq
                             (call s.$.routing.relay_peer_id! ("op" "noop") [])
                             (call -relay- ("op" "noop") [])
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                           )
                           (call -relay- ("op" "noop") [])
                          )
                         )
                        )
                        (call s.$.routing.relay_peer_id! ("op" "noop") [])
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [s.$.error!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "verify",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "router",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "payload",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
